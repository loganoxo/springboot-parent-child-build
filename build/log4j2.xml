<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别：FATAL>ERROR>WARN>INFO>DEBUG>TRACE>ALL-->
<!--
status: 应该打印到控制台的内部 Log4j 日志事件的级别,设置该属性为 trace 是查找 Log4j 故障的第一手工具
monitorInterval ：检查配置文件是否有更新的间隔秒数,最小间隔为5秒,修改target目录下的配置文件测试-->
<Configuration status="WARN" monitorInterval="30">
    <!--自定义Properties，用于下面其他配置，类似于声明了一个变量，通过${name}引用该变量-->
    <Properties>
        <!-- 子工程名字 -->
        <property name="PROJECT_NAME" value="build"/>
        <!-- 日志最大的历史 3天-->
        <property name="MAX_HISTORY" value="3"/>
        <!-- 组件名称 -->
        <property name="MODULE_NAME" value="logan"/>
        <!-- 日志文件目录 -->
        <property name="DIR" value="${PROJECT_NAME}/logs"/>
        <!-- 日志文件大小上限 1KB 1MB-->
        <property name="MAX_FILE_SIZE" value="1KB"/>
    </Properties>
    <!-- 开启JMX管理日志,Log4j2内置JMX，自动开启 -->

    <!--filter范围-->
    <!--
    1、Context-wide Filters：直接写在Configuration标签下，和Appenders、loggers同级. 日志事件如果被filter拒绝，则不会传递给logger；一旦一个日志事件通过了某个filter，则这个事件不会受到其他Context-wide filter影响，也不会受到Logger's Level影响，但是这个事件会受到Logger and Appender Filters影响.
    2、Logger Filters： 写在某个Logger标签下.日志事件经过Context-wide Filters和Log Level过滤后，才会到这个filter，如果不通过则丢弃事件，也不会传给父Logger.
    3、Appender Filters： 写在某个Appender标签下.决定一个Appender是否格式化和输出日志.
    4、Appender Reference：写在某个AppenderRef标签下，决定一个Logger是否应该将日志事件传递给一个appender.
    -->

    <!--Context-wide Filter 判断日志中是否包含某个字符串,全局过滤;通过就不会再判断日志级别了-->
    <!--    <StringMatchFilter text="test" onMatch="ACCEPT" onMismatch="DENY"/>-->

    <!-- 负责将日志传送至配置目的地，配置日志打印内容、格式、方式、保存策略等 -->
    <!--每个 Appender 都必须要有一个 name 属性，用来指定一个去别区其他 Appender 的唯一标识，该标识的值在 Logger 中通过 AppenderRef 来引用，从而将该 Appender 配置到该 Logger-->
    <Appenders>
        <!-- 输出到控制台 ConsoleAppender 将其输出写入 System.out 或 System.err，其中 System.out 为默认目标。必须提供一个Layout以格式化 LogEvent-->
        <Console name="STDOUT" target="SYSTEM_OUT">
            <!--Appender Filter 控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）
            如果 ThresholdFilter 配置为 Level ERROR，并且 LogEvent 包含 Level DEBUG，则将返回 onMismatch值 -->
            <ThresholdFilter level="TRACE" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} %X{traceId} - %msg%n"/>
        </Console>

        <Console name="STDOUT2" target="SYSTEM_OUT">
            <!--Appender Filter 控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）
            如果 ThresholdFilter 配置为 Level ERROR，并且 LogEvent 包含 Level DEBUG，则将返回 onMismatch值 -->
            <ThresholdFilter level="TRACE" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} %X{traceId} - %msg%n"/>
        </Console>

        <!--RollingRandomAccessFile =ByteBuffer + RandomAccessFile，缓冲区满了才写入日志，相比于RollingFile，RollingRandomAccessFile缓冲区不能关闭 -->

        <!--RollingFileAppender 是一个 OutputStreamAppender，它写入在 fileName 参数中命名的 File 并根据 TriggeringPolicy 和 RolloverPolicy 将文件滚动
        其中 TriggeringPolicy 决定是否生成新的日志文件，RolloverStrategy 决定如何生成新的日志文件。-->
        <!--fileName：存储文件名；append：是否追加还是覆盖，默认true追加；bufferedIO：默认为true有缓冲区；bufferSize：默认缓冲区大小为8192 bytes
        immediateFlush：默认为true，表示所有消息都会被立即输出，屏蔽缓冲区
        filePattern：表示触发rollover，生成新的日志文件时，旧的日志文件改名的格式，该模式依赖于所用的 RolloverPolicy和DefaultRolloverPolicy；-->
        <!-- error级别单独记录 会只会记录ERROR 级别的日志-->
        <RollingFile name="errorAppender" fileName="${DIR}/${MODULE_NAME}-error.log" append="true"
                     filePattern="${DIR}/${MODULE_NAME}-error/${MODULE_NAME}-error-%d{yyyy-MM-dd}.%i.log.gz">
            <PatternLayout>
                <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{35} %X{traceId} - %msg%n</Pattern>
            </PatternLayout>
            <!--触发滚动的规则-->
            <Policies>
                <!-- 以PatternLayout中配置的%d{yyyy-MM-dd}时间格式中最小单位自动回滚，所以是按天滚动；interval：几天滚动一次
                modulate：是否自动调整事件间隔，以便下次滚动发生在 interval 边界处。例如，如果时间单位为小时，当前时间为早上 3 点，间隔为 4 小时，则第一次滚动将发生在早上 4 点时（而不是早上 7点），后续滚动将发生在 早上 8 点、中午 12 点、下午 4 点等时刻。
                -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <!--当文件大小到达MAX_FILE_SIZE时滚动一次-->
                <SizeBasedTriggeringPolicy size="${MAX_FILE_SIZE}"/>
            </Policies>
            <!--指定了如何(How)进行翻滚，max：默认为7，指定了当天最大翻滚次数(影响%i参数值)，超过次数之后会按照相应的规则删除旧日志-->
            <DefaultRolloverStrategy max="7">
                <!--删除旧日志 basePath：从此处开始扫描要删除的文件的基本路径；maxDepth：访问目录的深度-->
                <Delete basePath="${DIR}" maxDepth="2">
                    <!-- 配置且关系 -->
                    <!--文件名正则匹配-->
                    <IfFileName glob="*/*.log.gz"/>
                    <!--这里的age必须和filePattern协调, 后者是精确到dd, 这里就要写成xd, xD就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <IfLastModified age="${MAX_HISTORY}d"/>
                </Delete>
            </DefaultRolloverStrategy>
            <!--添加过滤器ThresholdFilter,可以有选择的输出某个级别以上的类别  onMatch="ACCEPT" onMismatch="DENY"意思是匹配就接受,否则直接拒绝  -->
            <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
        </RollingFile>

        <!-- warn级别单独记录 会记录ERROR WARN 级别的日志-->
        <RollingFile name="warnAppender" fileName="${DIR}/${MODULE_NAME}-warn.log"
                     filePattern="${DIR}/${MODULE_NAME}-warn/${MODULE_NAME}-warn-%d{yyyy-MM-dd}.%i.log.gz">
            <PatternLayout>
                <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{35} %X{traceId} - %msg%n</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <SizeBasedTriggeringPolicy size="${MAX_FILE_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy max="7">
                <Delete basePath="${DIR}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz"/>
                    <IfLastModified age="${MAX_HISTORY}d"/>
                </Delete>
            </DefaultRolloverStrategy>
            <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
        </RollingFile>

        <!--info级别单独记录  会记录ERROR WARN INFO级别的日志-->
        <RollingFile name="infoAppender" fileName="${DIR}/${MODULE_NAME}-info.log"
                     filePattern="${DIR}/${MODULE_NAME}-info/${MODULE_NAME}-info-%d{yyyy-MM-dd}.%i.log.gz">
            <PatternLayout>
                <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{35} %X{traceId} - %msg%n</Pattern>
            </PatternLayout>
            <Policies>
                <!-- 以day为单位自动回滚 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <!--当文件大小到达100M时-->
                <SizeBasedTriggeringPolicy size="${MAX_FILE_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy max="7">
                <Delete basePath="${DIR}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz"/>
                    <IfLastModified age="${MAX_HISTORY}d"/>
                </Delete>
            </DefaultRolloverStrategy>
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
        </RollingFile>

        <!--JSON格式输出-->
        <RollingFile name="JsonFile" fileName="${DIR}/${MODULE_NAME}-json.log"
                     filePattern="${DIR}/${MODULE_NAME}-json/${MODULE_NAME}-json-%d{yyyy-MM-dd}.%i.log.gz">
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <SizeBasedTriggeringPolicy size="${MAX_FILE_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy max="7">
                <Delete basePath="${DIR}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz"/>
                    <IfLastModified age="${MAX_HISTORY}d"/>
                </Delete>
            </DefaultRolloverStrategy>
            <!--以json格式输出日志-->
            <!--compact：设置是否紧凑输出，默认是false,如果设置为true,则不是用行位和缩进，大概意思是说，输出把所有的日志输出为一行。
                complete：如果complete =“ false”，则追加程序不会在文档的开头“]”和结尾处写入 JSON 开放数组字符“ [”，也不会在记录之间写入逗号“，”
                locationInfo：如果为 true，则附加程序将位置信息包含在生成的 JSON 中。默认为 false。
                eventEol:如果为 true，则每次记录后加一个换行符-->
            <JsonLayout compact="true" locationInfo="false" complete="false" eventEol="true">
                <!--输出任何自定义字段-->
                <KeyValuePair key="app_name" value="${MODULE_NAME}"/>
                <KeyValuePair key="message_time" value="$${date:yyyy-MM-dd HH:mm:ss.SSS}"/>
            </JsonLayout>
        </RollingFile>

        <!--Log4j2中的异步日志实现方式有AsyncAppender和AsyncLogger两种
            AsyncAppender：采用了ArrayBlockingQueue来保存需要异步输出的日志事件,多线程应用阻塞队列很容易发生锁争用，性能会变差
                  bufferSize: 队列中可存储的日志事件的最大数量，默认为128
            AsyncLogger：考虑使用无锁异步 Logger以获得最佳性能，使用了Disruptor框架来实现高吞吐        -->
        <Async name="ASYNJsonAppender" bufferSize="512">
            <!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 -->
            <!--            <AsyncQueueFullPolicy>Discard</AsyncQueueFullPolicy>-->
            <!--            <discardingThreshold>0</discardingThreshold>-->
            <AppenderRef ref="JsonFile"/>
        </Async>

        <Async name="ASYNSTDOUT2" bufferSize="512">
            <AppenderRef ref="STDOUT2"/>
        </Async>

    </Appenders>

    <!--日志打印配置，只有此处配置了Appender，Appender才会生效。log4j2允许日志打印到一个或多个目标文件，该标签可以配置一个或多个AppenderRef子元素，
    ref属性值与该name的Appender关联，每一个Appender为一个日志输出目标。-->
    <Loggers>
        <!-- 为某个特定的类设置logger，additivity：该Logger是否附加给Root，默认为true-->
        <!--Logger logger = LogManager.getLogger(App.class); 这个获取的logger-name就是类的全限定名com.logan.App -->
        <!--        <Logger name="com.logan.App" level="TRACE" additivity="false">-->
        <!--            <AppenderRef ref="STDOUT"/>-->
        <!--        </Logger>-->

        <!--TraceTest1中的日志会打印-->
        <Logger name="com.logan.TraceTest1" level="TRACE"/><!--这种方式直接给某个类设置日志级别，传入root-->

        <!-- 根，所有logger的祖先 -->
        <!--Root用来收集所有的<Logger>设置的日志打印，每个log4j2的配置都必须有，但可缺省，使用默认的root具有error级别，并且仅附加Console控制台打印-->
        <!--TraceTest2中的日志不会打印-->
        <Root level="INFO">
            <!--以下配置了<Root>并将其打印级别设置为info，因此上面的name为"com.logan.TraceTest1"并且配置了AppenderRef的<Logger>的additivity属性必须设置为false，就不会反馈到<Root>中；
            否则"STDOUT"的Appender的info级别上的日志，将分别在<Logger name="com.logan.TraceTest1">和<Root>中被打印两次。-->
            <AppenderRef ref="STDOUT"/>
            <!--  <AppenderRef ref="STDOUT2"/>   控制台会输出第二次-->

            <!-- error级别单独记录 会只会记录ERROR 级别的日志-->
            <appender-ref ref="errorAppender"/>
            <!-- warn级别单独记录 会记录ERROR WARN 级别的日志-->
            <AppenderRef ref="warnAppender"/>
            <!--info级别单独记录  会记录ERROR WARN INFO级别的日志-->
            <AppenderRef ref="infoAppender"/>
            <!--使用原生的异步队列 info级别单独记录  会记录ERROR WARN INFO级别的日志-->
            <AppenderRef ref="ASYNJsonAppender"/>
        </Root>

        <!--用于测试原生异步日志性能-->
        <Logger name="ASYNSTDOUT2" level="TRACE" additivity="false">
            <AppenderRef ref="ASYNSTDOUT2"/>
        </Logger>

        <!--AsyncLogger：使用无锁异步  混用-->
        <!--要使所有记录器异步，请将disruptor jar添加到类路径，并将系统属性log4j2.contextSelector设置 为org.apache.logging.log4j.core.async.AsyncLoggerContextSelector-->
        <AsyncLogger name="com.logan.AsyncLoggerTest" level="INFO" additivity="false">
            <appender-ref ref="STDOUT2"/>
        </AsyncLogger>
    </Loggers>
</Configuration>